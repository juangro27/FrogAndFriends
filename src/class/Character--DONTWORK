class Character {
  constructor(ctx, canvasSize, width, height, floors, stairs) {
    this.ctx = ctx;
    this.canvasSize = canvasSize;
    this.position = {
      x: 20,
      y: this.canvasSize.h - (this.canvasSize.h / 6) * 5 - 49,
    };
    this.vikingSize = {
      w: width,
      h: height,
    };
    this.physics = {
      gravity: 0.05,
    };
    this.speed = { x: 1, y: 0.1 };
    this.status = undefined;
    this.lives = 3;
    this.floors = floors;
    this.actualStairsY = undefined;
    this.actualStairsX = undefined;
    this.stairs = stairs;
  }
  drawAll() {
    this.createViking(
      this.position.x,
      this.position.y,
      this.vikingSize.w,
      this.vikingSize.h,
      "black"
    );
  }
  createViking(x, y, w, h, color) {
    if (color) this.ctx.fillStyle = color;
    this.ctx.fillRect(x, y, w, h);
  }

  move(keysStatus) {
    console.log(checkHitBox(this.floors, 1, this.vikingSize, this.position));

    if (
      (keysStatus.RIGHT &&
        checkHitBox(this.floors, 1, this.vikingSize, this.position)) ||
      (keysStatus.RIGHT &&
        checkHitBox(this.stairs, 1, this.vikingSize, this.position))
    ) {
      this.position.x += this.speed.x;
    } else if (
      (keysStatus.LEFT &&
        checkHitBox(this.floors, 1, this.vikingSize, this.position)) ||
      (keysStatus.LEFT &&
        checkHitBox(this.stairs, 1, this.vikingSize, this.position))
    ) {
      this.position.x -= this.speed.x;
    } else if (
      keysStatus.UP &&
      checkHitBox(this.stairs, 1, this.vikingSize, this.position)
    ) {
      this.position.y -= this.speed.x;
    } else if (
      keysStatus.DOWN &&
      checkHitBox(this.stairs, 1, this.vikingSize, this.position)
    ) {
      this.position.y += this.speed.x;
    }
    if (
      checkHitBox(this.floors, 1, this.vikingSize, this.position) === false &&
      checkHitBox(this.stairs, 1, this.vikingSize, this.position) === false
    ) {
      this.setGravity();
    }
  }
  setGravity() {
    this.position.y += this.speed.y;
    this.speed.y += this.physics.gravity;
  }
}
class Viking1 extends Character {
  constructor(ctx, canvasSize, width, height, floors, stairs) {
    super(ctx, canvasSize, width, height, floors, stairs);
    this.status = true;
    this.canJump = undefined;
    this.physics = {
      gravity: 0.5,
    };
  }
  drawAll() {
    this.createViking(
      this.position.x,
      this.position.y,
      this.vikingSize.w,
      this.vikingSize.h,
      "blue"
    );
  }
  move(keysStatus) {
    if (keysStatus.RIGHT) {
      this.position.x += this.speed.x;
    } else if (keysStatus.LEFT) {
      this.position.x -= this.speed.x;
    } else if (
      keysStatus.UP &&
      checkHitBox(this.stairs, 1, this.vikingSize, this.position)
    ) {
      this.position.y -= this.speed.x;
    } else if (
      keysStatus.DOWN &&
      checkHitBox(this.stairs, 1, this.vikingSize, this.position)
    ) {
      this.position.y += this.speed.x;
    }
    if (
      checkHitBox(this.floors, 1, this.vikingSize, this.position) === false &&
      checkHitBox(this.stairs, 1, this.vikingSize, this.position) === false
    ) {
      this.setGravity();
    }
  }
  checkJump(keysStatus) {
    if (checkHitBox(this.floors, 1, this.vikingSize, this.position)) {
      this.speed.y = 0;
      this.canJump = true;
      if (keysStatus.SPACE) {
        this.canJump = true;
      }
      if (!checkHitBox(this.floors, 1, this.vikingSize, this.position)) {
        this.canJump = false;
      }
    }
  }
  jump() {
    console.log(this.canJump);

    if (this.canJump) {
      this.speed.y -= 12;
      this.position.y -= 25;
      this.canJump = false;
      this.setGravity();
    }
  }
  setGravity() {
    if (!checkHitBox(this.floors, 1, this.vikingSize, this.position)) {
      this.position.y += this.speed.y;
      this.speed.y += this.physics.gravity;
    }
  }
}
// setGravity() {
//   if (this.position.y < checkHitBox(this.floor1, 1)) {
//     this.position.y += this.speed.y;
//     this.speed.y += this.physics.gravity;
//   } else {
//     this.position.y -= 50;
//     this.speed.y = 1;
//   }
// }
class Viking2 extends Character {
  constructor(ctx, canvasSize, width, height, floors, stairs) {
    super(ctx, canvasSize, width, height, floors, stairs);
    this.status = false;
  }
  shell() {}
}
class Viking3 extends Character {
  constructor(ctx, canvasSize, width, height, floors, stairs) {
    super(ctx, canvasSize, width, height, floors, stairs);
    this.status = false;
  }
  attack() {}
}

// character's
// -----------------------
// active
// position
// height
// width
// lives: 3
// power:
//     1. salta
//     2. escudo
//     3. ataca

// move()
// upStairs()
// downStairs()

// extras:

//     1 power more to each
//     2 extra lives
